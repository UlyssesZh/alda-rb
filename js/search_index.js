var search_data = {"index":{"searchIndex":["alda","atmarker","chord","commandlineerror","cram","event","eventcontainer","eventlist","generationerror","getvariable","inlinelisp","lispidentifier","marker","nreplservererror","note","octave","ordererror","part","repl","tempscore","raw","rest","score","sequence","refineflatten","setvariable","utils","voice","array","falseclass","hash","kernel","nilclass","numeric","proc","range","string","stringio","symbol","thread","trueclass","%()","*()","*()","+@()","+@()","-@()","-@()","/()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","[]()","alda()","assert_generation()","check_in_chord()","clear()","clear_history()","clear_history()","clear_options()","deduce_generation()","detach_from_parent()","detach_from_parent()","detach_from_parent()","detach_from_parent()","detach_from_parent()","detach_from_parent()","detach_from_parent()","detach_from_parent()","detach_from_parent()","detach_from_parent()","down?()","env()","events_alda_codes()","export()","flatten()","get_binding()","has_variable?()","history()","import()","is_event_of?()","is_event_of?()","join()","l()","load()","map()","message()","method_missing()","method_missing()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_score()","on_contained()","on_contained()","on_contained()","on_contained()","on_containing()","parent=()","parse()","pipe()","play()","play_score()","port()","process_rb_code()","processes()","raw()","raw_message()","rb_code()","readline()","run()","save()","score()","score_data()","score_events()","score_text()","setup_repl()","slug_to_snake()","snake_to_slug()","start()","terminate()","to_a()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_alda_code()","to_s()","to_s()","to_s()","try_command()","up?()","warn()","win_platform?()","~()","changelog","code_of_conduct","license","readme"],"longSearchIndex":["alda","alda::atmarker","alda::chord","alda::commandlineerror","alda::cram","alda::event","alda::eventcontainer","alda::eventlist","alda::generationerror","alda::getvariable","alda::inlinelisp","alda::lispidentifier","alda::marker","alda::nreplservererror","alda::note","alda::octave","alda::ordererror","alda::part","alda::repl","alda::repl::tempscore","alda::raw","alda::rest","alda::score","alda::sequence","alda::sequence::refineflatten","alda::setvariable","alda::utils","alda::voice","array","falseclass","hash","kernel","nilclass","numeric","proc","range","string","stringio","symbol","thread","trueclass","alda::eventcontainer#%()","alda::eventcontainer#*()","proc#*()","alda::note#+@()","alda::octave#+@()","alda::note#-@()","alda::octave#-@()","alda::eventcontainer#/()","alda::atmarker#==()","alda::cram#==()","alda::event#==()","alda::eventcontainer#==()","alda::eventlist#==()","alda::getvariable#==()","alda::inlinelisp#==()","alda::lispidentifier#==()","alda::marker#==()","alda::note#==()","alda::octave#==()","alda::part#==()","alda::raw#==()","alda::rest#==()","alda::setvariable#==()","alda::voice#==()","alda::[]()","kernel#alda()","alda::generationerror::assert_generation()","alda::eventcontainer#check_in_chord()","alda::score#clear()","alda::repl#clear_history()","alda::repl::tempscore#clear_history()","alda::clear_options()","alda::deduce_generation()","alda::event#detach_from_parent()","array#detach_from_parent()","falseclass#detach_from_parent()","hash#detach_from_parent()","nilclass#detach_from_parent()","numeric#detach_from_parent()","range#detach_from_parent()","string#detach_from_parent()","symbol#detach_from_parent()","trueclass#detach_from_parent()","alda::down?()","alda::env()","alda::eventlist#events_alda_codes()","alda::score#export()","alda::sequence::refineflatten#flatten()","alda::repl::tempscore#get_binding()","alda::eventlist#has_variable?()","alda::repl#history()","alda::eventlist#import()","alda::event#is_event_of?()","alda::eventcontainer#is_event_of?()","alda::sequence::join()","alda::score#l()","alda::score#load()","alda::repl::tempscore#map()","alda::repl#message()","alda::eventcontainer#method_missing()","alda::eventlist#method_missing()","alda::part#method_missing()","alda::atmarker::new()","alda::chord::new()","alda::commandlineerror::new()","alda::cram::new()","alda::eventcontainer::new()","alda::eventlist::new()","alda::generationerror::new()","alda::getvariable::new()","alda::inlinelisp::new()","alda::lispidentifier::new()","alda::marker::new()","alda::nreplservererror::new()","alda::note::new()","alda::octave::new()","alda::ordererror::new()","alda::part::new()","alda::repl::new()","alda::repl::tempscore::new()","alda::repl::tempscore#new()","alda::raw::new()","alda::rest::new()","alda::score::new()","alda::setvariable::new()","alda::voice::new()","alda::repl::tempscore#new_score()","alda::event#on_contained()","alda::eventlist#on_contained()","alda::inlinelisp#on_contained()","alda::setvariable#on_contained()","alda::eventcontainer#on_containing()","alda::eventcontainer#parent=()","alda::score#parse()","alda::pipe()","alda::score#play()","alda::repl#play_score()","alda::commandlineerror#port()","alda::repl#process_rb_code()","alda::processes()","alda::score#raw()","alda::repl#raw_message()","alda::repl#rb_code()","alda::repl#readline()","alda::repl#run()","alda::score#save()","alda::repl::tempscore#score()","alda::repl::tempscore#score_data()","alda::repl::tempscore#score_events()","alda::repl::tempscore#score_text()","alda::repl#setup_repl()","alda::utils::slug_to_snake()","alda::utils::snake_to_slug()","alda::repl#start()","alda::repl#terminate()","alda::eventlist#to_a()","alda::atmarker#to_alda_code()","alda::chord#to_alda_code()","alda::cram#to_alda_code()","alda::event#to_alda_code()","alda::eventcontainer#to_alda_code()","alda::getvariable#to_alda_code()","alda::inlinelisp#to_alda_code()","alda::lispidentifier#to_alda_code()","alda::marker#to_alda_code()","alda::note#to_alda_code()","alda::octave#to_alda_code()","alda::part#to_alda_code()","alda::raw#to_alda_code()","alda::rest#to_alda_code()","alda::sequence#to_alda_code()","alda::setvariable#to_alda_code()","alda::voice#to_alda_code()","array#to_alda_code()","falseclass#to_alda_code()","hash#to_alda_code()","nilclass#to_alda_code()","numeric#to_alda_code()","range#to_alda_code()","string#to_alda_code()","symbol#to_alda_code()","trueclass#to_alda_code()","alda::repl::tempscore#to_s()","alda::score#to_s()","stringio#to_s()","alda::repl#try_command()","alda::up?()","alda::utils::warn()","alda::utils::win_platform?()","alda::note#~()","","","",""],"info":[["Alda","","Alda.html","","<p>The module serving as a namespace.\n"],["Alda::AtMarker","","Alda/AtMarker.html","","<p>An at-marker event. An Alda::EventContainer containing an Alda::AtMarker can be created using event list …\n"],["Alda::Chord","","Alda/Chord.html","","<p>A chord event. Includes Alda::EventList.\n<p>An Alda::EventContainer containing an Alda::Chord can be created …\n"],["Alda::CommandLineError","","Alda/CommandLineError.html","","<p>The error is raised when <code>alda</code> command exits with nonzero status.\n"],["Alda::Cram","","Alda/Cram.html","","<p>A CRAM event. Includes Alda::EventList.\n<p>An Alda::EventContainer containing an Alda::Cram can be created …\n"],["Alda::Event","","Alda/Event.html","","<p>The class of elements of Alda::EventList#events.\n"],["Alda::EventContainer","","Alda/EventContainer.html","","<p>The class for objects containing an event.\n<p>Alda::EventContainer objects are literally everywhere if you …\n"],["Alda::EventList","","Alda/EventList.html","","<p>Including this module can make your class have the ability to have an event list. See docs below to get …\n"],["Alda::GenerationError","","Alda/GenerationError.html","","<p>This error is raised when one tries to run commands that are not available for the generation of Alda …\n"],["Alda::GetVariable","","Alda/GetVariable.html","","<p>A get-variable event. An Alda::EventContainer containing an Alda::GetVariable can be derived using event …\n"],["Alda::InlineLisp","","Alda/InlineLisp.html","","<p>An inline lisp event. An Alda::EventContainer containing an Alda::InlineLisp can be derived using event …\n"],["Alda::LispIdentifier","","Alda/LispIdentifier.html","","<p>A lisp identifier event. An Alda::EventContainer containing an Alda::Lisp\n<p>It is in fact not a kind of …\n"],["Alda::Marker","","Alda/Marker.html","","<p>A marker event. An Alda::EventContainer containing an Alda::Marker can be created using event list sugar. …\n"],["Alda::NREPLServerError","","Alda/NREPLServerError.html","","<p>The error is raised when the Alda nREPL server returns problems. This is only available for Alda 2.  …\n"],["Alda::Note","","Alda/Note.html","","<p>A note event. An Alda::EventContainer containing an Alda::Note can be derived using Alda::EventList sugar. …\n"],["Alda::Octave","","Alda/Octave.html","","<p>An octave event. An Alda::EventContainer containing an Alda::Octave can be derived using event list sugar. …\n"],["Alda::OrderError","","Alda/OrderError.html","","<p>This error is raised when one tries to append events in an Alda::EventList in a wrong order.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Alda</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Score</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Alda::Part","","Alda/Part.html","","<p>A part event. An Alda::EventContainer containing an Alda::Part can be derived using event list sugar. …\n"],["Alda::REPL","","Alda/REPL.html","","<p>An instance of this class is an REPL session.\n<p>It provides an Alda::REPL::TempScore for you to operate …\n"],["Alda::REPL::TempScore","","Alda/REPL/TempScore.html","","<p>The score object used in Alda::REPL.\n<p>Includes Alda, so it can refer to alda commandline. However, the …\n"],["Alda::Raw","","Alda/Raw.html","","<p>A special event that contains raw Alda codes. This is a walkaround for the absence of <code>alda-code</code> function …\n"],["Alda::Rest","","Alda/Rest.html","","<p>A rest event. An Alda::EventContainer containing an Alda::Rest can be created using event list sugar. …\n"],["Alda::Score","","Alda/Score.html","","<p>Includes Alda::EventList and provides methods to #play, #parse, or #export.\n"],["Alda::Sequence","","Alda/Sequence.html","","<p>A sequence event. Includes Alda::EventList.\n<p>An Alda::EventContainer containing an Alda::Sequence can be …\n"],["Alda::Sequence::RefineFlatten","","Alda/Sequence/RefineFlatten.html","","<p>Using this module can fix a bug of <code>Array#flatten</code>.\n\n<pre>def (a = Object.new).method_missing(...)\n  Object.new ...</pre>\n"],["Alda::SetVariable","","Alda/SetVariable.html","","<p>A set-variable event. Includes Alda::EventList.\n<p>An Alda::EventContainer containing an Alda::SetVariable …\n"],["Alda::Utils","","Alda/Utils.html","","<p>Some useful functions.\n"],["Alda::Voice","","Alda/Voice.html","","<p>A voice event. An Alda::EventContainer containing an Alda::Voice can be created using event list sugar. …\n"],["Array","","Array.html","","<p>Contains patches to Ruby’s core classes.\n"],["FalseClass","","FalseClass.html","","<p>Contains patches to Ruby’s core classes.\n"],["Hash","","Hash.html","","<p>Contains patches to Ruby’s core classes.\n"],["Kernel","","Kernel.html","","<p>Adding functions that is accessible everywhere.\n"],["NilClass","","NilClass.html","","<p>Contains patches to Ruby’s core classes.\n"],["Numeric","","Numeric.html","","<p>Contains patches to Ruby’s core classes.\n"],["Proc","","Proc.html","","<p>Contains patches to Ruby’s core classes.\n"],["Range","","Range.html","","<p>Contains patches to Ruby’s core classes.\n"],["String","","String.html","","<p>Contains patches to Ruby’s core classes.\n"],["StringIO","","StringIO.html","","<p>Contains patches to Ruby’s core classes.\n"],["Symbol","","Symbol.html","","<p>Contains patches to Ruby’s core classes.\n"],["Thread","","Thread.html","","<p>Contains patches to Ruby’s core classes.\n"],["TrueClass","","TrueClass.html","","<p>Contains patches to Ruby’s core classes.\n"],["%","Alda::EventContainer","Alda/EventContainer.html#method-i-25","(labels)","<p>Marks alternative endings.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Alda</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Score</span>.<span class=\"ruby-identifier\">new</span> { (<span class=\"ruby-identifier\">b</span> <span class=\"ruby-identifier\">a</span><span class=\"ruby-operator\">%</span><span class=\"ruby-value\">1</span>)<span class=\"ruby-operator\">*</span><span class=\"ruby-value\">2</span> }.<span class=\"ruby-identifier\">to_s</span>\n<span class=\"ruby-comment\"># =&gt; &quot;[b a&#39;1]*2&quot;</span>\n</pre>\n"],["*","Alda::EventContainer","Alda/EventContainer.html#method-i-2A","(num)","<p>Marks repetition.\n<p>For examples, see #%.\n"],["*","Proc","Proc.html#method-i-2A","(n)","<p>Runs <code>self</code> for <code>n</code> times.\n"],["+@","Alda::Note","Alda/Note.html#method-i-2B-40","()","<p>Append a sharp sign after #pitch.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Alda</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Score</span>.<span class=\"ruby-identifier\">new</span> { <span class=\"ruby-identifier\">piano_</span>; <span class=\"ruby-operator\">+</span><span class=\"ruby-identifier\">c</span> }.<span class=\"ruby-identifier\">play</span>\n<span class=\"ruby-comment\"># (plays a C sharp note)</span>\n</pre>\n"],["+@","Alda::Octave","Alda/Octave.html#method-i-2B-40","()","<p>Octave up.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Alda</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Score</span>.<span class=\"ruby-identifier\">new</span> { <span class=\"ruby-identifier\">piano_</span>; <span class=\"ruby-identifier\">c</span>; <span class=\"ruby-operator\">+</span><span class=\"ruby-identifier\">o</span>; <span class=\"ruby-identifier\">c</span> }.<span class=\"ruby-identifier\">play</span>\n<span class=\"ruby-comment\"># (plays C4, then C5)</span>\n</pre>\n<p>See #-@.\n"],["-@","Alda::Note","Alda/Note.html#method-i-2D-40","()","<p>Append a flat sign after #pitch.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Alda</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Score</span>.<span class=\"ruby-identifier\">new</span> { <span class=\"ruby-identifier\">piano_</span>; <span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">d</span> }.<span class=\"ruby-identifier\">play</span>\n<span class=\"ruby-comment\"># (plays a D flat note)</span>\n</pre>\n"],["-@","Alda::Octave","Alda/Octave.html#method-i-2D-40","()","<p>Octave down. See #+@.\n"],["/","Alda::EventContainer","Alda/EventContainer.html#method-i-2F","(other)","<p>If at first #event is not an Alda::Part, makes #event an Alda::Chord object.\n\n<pre>Alda::Score.new { piano_; ...</pre>\n"],["==","Alda::AtMarker","Alda/AtMarker.html#method-i-3D-3D","(other)","<p>Overrides Alda::Event#==. Returns true if <code>other</code> is an Alda::AtMarker and has the same #name as <code>at_marker</code> …\n"],["==","Alda::Cram","Alda/Cram.html#method-i-3D-3D","(other)","<p>Overrides Alda::EventList#==. Returns true if the super method returns true and <code>other</code> has the same #duration …\n"],["==","Alda::Event","Alda/Event.html#method-i-3D-3D","(other)","<p>Whether it is equal to <code>other</code>. To be overriden.\n<p>Note that #parent and #container should not be taken into …\n"],["==","Alda::EventContainer","Alda/EventContainer.html#method-i-3D-3D","(other)","<p>Overrides Alda::Event#==. Returns true if <code>other</code> is an Alda::EventContainer object and #event, #count …\n"],["==","Alda::EventList","Alda/EventList.html#method-i-3D-3D","(other)","<p>Returns true if <code>other</code> is of the same class as <code>event_list</code> and they have the same (in the sense of <code>==</code>) …\n"],["==","Alda::GetVariable","Alda/GetVariable.html#method-i-3D-3D","(other)","<p>Overrides Alda::Event#==. Returns true if <code>other</code> is an Alda::GetVariable and has the same #name as <code>get_variable</code> …\n"],["==","Alda::InlineLisp","Alda/InlineLisp.html#method-i-3D-3D","(other)","<p>Overrides Alda::Event#==. Returns true if <code>other</code> is an Alda::InlineLisp and has the same #head and #args …\n"],["==","Alda::LispIdentifier","Alda/LispIdentifier.html#method-i-3D-3D","(other)","<p>Overrides Alda::Event#==. Returns true if <code>other</code> is an Alda::LispIdentifier and has the same #name as …\n"],["==","Alda::Marker","Alda/Marker.html#method-i-3D-3D","(other)","<p>Overrides Alda::Event#==. Returns true if <code>other</code> is an Alda::Marker and has the same #name as <code>marker</code> (using …\n"],["==","Alda::Note","Alda/Note.html#method-i-3D-3D","(other)","<p>Overrides Alda::Event#==. Returns true if <code>other</code> is an Alda::Note and has the same #pitch and #duration …\n"],["==","Alda::Octave","Alda/Octave.html#method-i-3D-3D","(other)","<p>Overrides Alda::Event#==. Returns true if <code>other</code> is an Alda::Octave and has the same #num and #up_or_down …\n"],["==","Alda::Part","Alda/Part.html#method-i-3D-3D","(other)","<p>Overrides Alda::Event#==. Returns true if <code>other</code> is an Alda::Part and has the same #names and #arg as …\n"],["==","Alda::Raw","Alda/Raw.html#method-i-3D-3D","(other)","<p>Overrides Alda::Event#==. Returns true if <code>other</code> is an Alda::Raw and has the same #contents as <code>raw</code> (using …\n"],["==","Alda::Rest","Alda/Rest.html#method-i-3D-3D","(other)","<p>Overrides Alda::Event#==. Returns true if <code>other</code> is an Alda::Rest and has the same #duration as <code>rest</code> (using …\n"],["==","Alda::SetVariable","Alda/SetVariable.html#method-i-3D-3D","(other)","<p>Overrides Alda::EventList#==. Returns true if the super method returns true and <code>other</code> has the same #name …\n"],["==","Alda::Voice","Alda/Voice.html#method-i-3D-3D","(other)","<p>Overrides Alda::Event#==. Returns true if <code>other</code> is an Alda::Voice and has the same #num as <code>voice</code> (using …\n"],["[]","Alda","Alda.html#method-c-5B-5D","(**opts)","<p>Sets the options of alda command. Not the subcommand options.\n\n<pre># This example only works for Alda 1.\nAlda[port: ...</pre>\n"],["alda","Kernel","Kernel.html#method-i-alda","(*args)","<p>Runs the alda command. Does not capture output.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">alda</span> <span class=\"ruby-string\">&#39;version&#39;</span>\n<span class=\"ruby-identifier\">alda</span> <span class=\"ruby-string\">&#39;play&#39;</span>, <span class=\"ruby-string\">&#39;-c&#39;</span>, <span class=\"ruby-string\">&#39;piano: a&#39;</span>\n<span class=\"ruby-identifier\">alda</span> <span class=\"ruby-string\">&#39;repl&#39;</span>\n</pre>\n"],["assert_generation","Alda::GenerationError","Alda/GenerationError.html#method-c-assert_generation","(fine_generations)","<p>Raises an Alda::GenerationError if the current generation is not in <code>fine_generations</code>.\n"],["check_in_chord","Alda::EventContainer","Alda/EventContainer.html#method-i-check_in_chord","()","<p>This method is called in #%, #*, and #parent=. It checks if #parent is an Alda::Chord and warns about …\n"],["clear","Alda::Score","Alda/Score.html#method-i-clear","()","<p>Clears all the events and variables.\n"],["clear_history","Alda::REPL","Alda/REPL.html#method-i-clear_history","()","<p>In Alda 1, clears #history. In Alda 2, askes the nREPL server to clear its history (start a new score). …\n"],["clear_history","Alda::REPL::TempScore","Alda/REPL/TempScore.html#method-i-clear_history","()","<p>Clears all the modifications that have been made to the score and start a new one. See #score for an …\n"],["clear_options","Alda","Alda.html#method-c-clear_options","()","<p>Clears the command line options. Makes ::options an empty Array.\n"],["deduce_generation","Alda","Alda.html#method-c-deduce_generation","()","<p>Deduce the generation of Alda being used by running <code>alda version</code> in command line, and then set ::generation …\n"],["detach_from_parent","Alda::Event","Alda/Event.html#method-i-detach_from_parent","(except = [])","<p>Delete itself (or its topmost container if it has) from its #parent. If it is not at its #parent’s …\n"],["detach_from_parent","Array","Array.html#method-i-detach_from_parent","(...)","<p>See Alda::Event#detach_from_parent.\n"],["detach_from_parent","FalseClass","FalseClass.html#method-i-detach_from_parent","(...)","<p>See Alda::Event#detach_from_parent.\n"],["detach_from_parent","Hash","Hash.html#method-i-detach_from_parent","(...)","<p>See Alda::Event#detach_from_parent.\n"],["detach_from_parent","NilClass","NilClass.html#method-i-detach_from_parent","(...)","<p>See Alda::Event#detach_from_parent.\n"],["detach_from_parent","Numeric","Numeric.html#method-i-detach_from_parent","(...)","<p>See Alda::Event#detach_from_parent.\n"],["detach_from_parent","Range","Range.html#method-i-detach_from_parent","(...)","<p>See Alda::Event#detach_from_parent.\n"],["detach_from_parent","String","String.html#method-i-detach_from_parent","(...)","<p>See Alda::Event#detach_from_parent.\n"],["detach_from_parent","Symbol","Symbol.html#method-i-detach_from_parent","(...)","<p>See Alda::Event#detach_from_parent.\n"],["detach_from_parent","TrueClass","TrueClass.html#method-i-detach_from_parent","(...)","<p>See Alda::Event#detach_from_parent.\n"],["down?","Alda","Alda.html#method-c-down-3F","()","<p>Whether the alda server is down. Checks whether there are no play processes in ::processes in Alda 2. …\n"],["env","Alda","Alda.html#method-c-env","(hash = nil, &block)","<p>When called with no arguments, returns the commandline environment variables (a Hash) used when running …\n"],["events_alda_codes","Alda::EventList","Alda/EventList.html#method-i-events_alda_codes","(delimiter = ' ')","<p>Join the alda codes of #events with a specified delimiter. Returns a string representing the result. …\n"],["export","Alda::Score","Alda/Score.html#method-i-export","(**opts)","<p>Exports the score.\n<p>Returns the command line output of the <code>alda</code> command.\n<p>Run command <code>alda help</code> to see available …\n"],["flatten","Alda::Sequence::RefineFlatten","Alda/Sequence/RefineFlatten.html#method-i-flatten","()","<p>Overrides Array#flatten.\n"],["get_binding","Alda::REPL::TempScore","Alda/REPL/TempScore.html#method-i-get_binding","()","<p>Returns a Binding for the instance eval local environment of this score. Different callings of this method …\n"],["has_variable?","Alda::EventList","Alda/EventList.html#method-i-has_variable-3F","(name)","<p>Whether there is a previously declared alda variable whose name is specified by <code>name</code>.\n<p>Searches variables …\n"],["history","Alda::REPL","Alda/REPL.html#method-i-history","()","<p>In Alda 1, it is the same as an attribute reader. In Alda 2, it asks the nREPL server for its score text …\n"],["import","Alda::EventList","Alda/EventList.html#method-i-import","(event_list)","<p>Append the events of another Alda::EventList object here. This method covers the disadvantage of alda’s …\n"],["is_event_of?","Alda::Event","Alda/Event.html#method-i-is_event_of-3F","(klass)","<p>Whether it is an event of the given class (<code>klass</code>). By default, this is the same as +is_a?(klass)+. It …\n"],["is_event_of?","Alda::EventContainer","Alda/EventContainer.html#method-i-is_event_of-3F","(klass)","<p>Overrides Alda::Event#is_event_of?. Whether it is an event of the given class (<code>klass</code>) or the contained …\n"],["join","Alda::Sequence","Alda/Sequence.html#method-c-join","(*events)","<p>Creates an Alda::Sequence object by joining <code>events</code>.\n<p>The Alda::EventContainer objects are extracted, and …\n"],["l","Alda::Score","Alda/Score.html#method-i-l","(head, *args)","<p>Adds an Alda::EventContainer containing an Alda::InlineLisp event to the event list. In most cases,  …\n"],["load","Alda::Score","Alda/Score.html#method-i-load","(filename)","<p>Loads alda codes from a file.\n<p>Actually appends a Alda::Raw event with the contents in the file <code>filename</code> …\n"],["map","Alda::REPL::TempScore","Alda/REPL/TempScore.html#method-i-map","()","<p>Prints a data representation of the score. This is the output that you get when you call Alda::Score#parse …\n"],["message","Alda::REPL","Alda/REPL.html#method-i-message","(op, **params)","<p>Sends a message to the nREPL server with the following format, with <code>op</code> being the operation name (the …\n"],["method_missing","Alda::EventContainer","Alda/EventContainer.html#method-i-method_missing","(...)","<p>Calls method on #event.\n<p>Note that if the method of #event returns #event itself, the method here returns …\n"],["method_missing","Alda::EventList","Alda/EventList.html#method-i-method_missing","(name, *args, &block)","<p>Make the object have the ability to append its #events conveniently.\n<p>Here is a list of sugar. When the …\n"],["method_missing","Alda::Part","Alda/Part.html#method-i-method_missing","(name, *args)","<p>Enables dot accessor.\n\n<pre>Alda::Score.new do\n  violin_/viola_/cello_(&#39;strings&#39;); g1_1_1\n  strings_.cello_; ...</pre>\n"],["new","Alda::AtMarker","Alda/AtMarker.html#method-c-new","(name)","<p>Creates an Alda::AtMarker.\n<p>Underlines “_” in <code>name</code> is converted to hyphens “-”.\n"],["new","Alda::Chord","Alda/Chord.html#method-c-new","(*events, &block)","<p>There is an event list sugar invoking this method. See Alda::EventList#method_missing.\n<p>In most cases, …\n"],["new","Alda::CommandLineError","Alda/CommandLineError.html#method-c-new","(status, msg = nil)","<p>Create a Alda::CommandLineError object. <code>status</code> is the status of the process running <code>alda</code> command (can …\n"],["new","Alda::Cram","Alda/Cram.html#method-c-new","(duration, &block)","<p>There is an event list sugar invoking this method, see Alda::EventList#method_missing.\n<p><code>block</code> is to be …\n"],["new","Alda::EventContainer","Alda/EventContainer.html#method-c-new","(event, parent)","<p>Creates a new Alda::EventContainer. Invokes #on_containing.\n<p><code>event</code> is the Alda::Event object to be contained. …\n"],["new","Alda::EventList","Alda/EventList.html#method-c-new","(&block)","<p>The parameter <code>block</code> is to be passed with the Alda::EventList object as <code>self</code>.\n<p>Note that <code>block</code> is not called …\n"],["new","Alda::GenerationError","Alda/GenerationError.html#method-c-new","(fine_generations)","<p>Creates a Alda::GenerationError object.\n"],["new","Alda::GetVariable","Alda/GetVariable.html#method-c-new","(name)","<p>Creates an Alda::GetVariable.\n"],["new","Alda::InlineLisp","Alda/InlineLisp.html#method-c-new","(head, *args)","<p>Creates a new Alda::InlineLisp.\n<p>The underlines “_” in <code>head</code> will be converted to hyphens “-”. …\n"],["new","Alda::LispIdentifier","Alda/LispIdentifier.html#method-c-new","(name)","<p>Creates an Alda::LispIdentifier.\n<p>Underlines “_” in <code>name</code> is converted to hyphens “-”. …\n"],["new","Alda::Marker","Alda/Marker.html#method-c-new","(name)","<p>Creates an Alda::Marker.\n<p>Underlines in <code>name</code> is converted to hyphens.\n"],["new","Alda::NREPLServerError","Alda/NREPLServerError.html#method-c-new","(host, port, problems, status)","<p>Creates a Alda::NREPLServerError object. Raises Alda::GenerationError if the current generation is not …\n"],["new","Alda::Note","Alda/Note.html#method-c-new","(pitch, duration)","<p>The underlines in <code>duration</code> will be converted to tildes “~”. Exclamation mark and question mark …\n"],["new","Alda::Octave","Alda/Octave.html#method-c-new","(num)","<p>Creates an Alda::Octave.\n"],["new","Alda::OrderError","Alda/OrderError.html#method-c-new","(expected, got)","<p>Creates a Alda::OrderError object.\n"],["new","Alda::Part","Alda/Part.html#method-c-new","(names, arg = nil)","<p>Creates an Alda::Part.\n"],["new","Alda::REPL","Alda/REPL.html#method-c-new","(color: true, preview: true, reline: true, **opts)","<p>Creates a new Alda::REPL. The parameter <code>color</code> specifies whether the output should be colored (sets #color …\n"],["new","Alda::REPL::TempScore","Alda/REPL/TempScore.html#method-c-new","(session)","<p>Creates a new TempScore for the given REPL session specified by <code>session</code>. It is called in Alda::REPL::new …\n"],["new","Alda::REPL::TempScore","Alda/REPL/TempScore.html#method-i-new","()",""],["new","Alda::Raw","Alda/Raw.html#method-c-new","(contents)","<p>Creates an Alda::Raw.\n"],["new","Alda::Rest","Alda/Rest.html#method-c-new","(duration)","<p>Creates an Alda::Rest.\n<p>Underlines “_” in <code>duration</code> will be converted to tildes “~”. …\n"],["new","Alda::Score","Alda/Score.html#method-c-new","(...)","<p>Creates an Alda::Score.\n"],["new","Alda::SetVariable","Alda/SetVariable.html#method-c-new","(name, *events, &block)","<p>Creates an Alda::SetVariable.\n"],["new","Alda::Voice","Alda/Voice.html#method-c-new","(num)","<p>Creates an Alda::Voice.\n"],["new_score","Alda::REPL::TempScore","Alda/REPL/TempScore.html#method-i-new_score","()",""],["on_contained","Alda::Event","Alda/Event.html#method-i-on_contained","()","<p>The callback invoked when it is contained in an Alda::EventContainer. It is overridden in Alda::InlineLisp …\n"],["on_contained","Alda::EventList","Alda/EventList.html#method-i-on_contained","()","<p>When the module is included by a subclass of Alda::Event, this method overrides Alda::Event#on_contained …\n"],["on_contained","Alda::InlineLisp","Alda/InlineLisp.html#method-i-on_contained","()","<p>See Alda::Event#on_contained.\n"],["on_contained","Alda::SetVariable","Alda/SetVariable.html#method-i-on_contained","()","<p>See Alda::Event#on_contained.\n"],["on_containing","Alda::EventContainer","Alda/EventContainer.html#method-i-on_containing","()","<p>A callback invoked in #event= and ::new.\n"],["parent=","Alda::EventContainer","Alda/EventContainer.html#method-i-parent-3D","(event)","<p>Overrides Alda::Event#parent=. Sets the Alda::Event#parent of the container as well as that of #event …\n"],["parse","Alda::Score","Alda/Score.html#method-i-parse","(**opts)","<p>Parses the score.\n<p>Returns the JSON string of the parse result.\n<p>Run command <code>alda help</code> to see available options …\n"],["pipe","Alda","Alda.html#method-c-pipe","(command, *args, **opts, &block)","<p>Runs <code>alda</code> in command line as a child process and returns the pipe IO or pass the IO to the block. See …\n"],["play","Alda::Score","Alda/Score.html#method-i-play","(**opts)","<p>Plays the score.\n<p>Returns the command line output of the <code>alda</code> command.\n<p>Run command <code>alda help</code> to see available …\n"],["play_score","Alda::REPL","Alda/REPL.html#method-i-play_score","(code)","<p>Appends <code>code</code> to the history and plays the <code>code</code> as Alda code. In Alda 1, plays the score by sending <code>code</code> …\n"],["port","Alda::CommandLineError","Alda/CommandLineError.html#method-i-port","()","<p>The port on which the problematic alda server runs. This is only available for Alda 1.\n\n<pre>begin\n  Alda[port: ...</pre>\n"],["process_rb_code","Alda::REPL","Alda/REPL.html#method-i-process_rb_code","(code)","<p>Processes the Ruby codes read. Sends it to a score and sends the result to command line alda. Returns …\n"],["processes","Alda","Alda.html#method-c-processes","()","<p>Returns a Array of details about running Alda processes. Only available for Alda 2. Each element in the …\n"],["raw","Alda::Score","Alda/Score.html#method-i-raw","(contents)","<p>Adds an Alda::Raw event to the event list and returns it. The event is not contained by a container. …\n"],["raw_message","Alda::REPL","Alda/REPL.html#method-i-raw_message","(contents)","<p>Sends a message to the nREPL server and returns the response. The parameter <code>contents</code> is a Hash or a  …\n"],["rb_code","Alda::REPL","Alda/REPL.html#method-i-rb_code","()","<p>Reads and returns the next Ruby codes input in the REPL session. It can intelligently continue reading …\n"],["readline","Alda::REPL","Alda/REPL.html#method-i-readline","(indent = 0)","<p>Prompts the user to input a line. The parameter <code>indent</code> is the indentation level. Twice the number of …\n"],["run","Alda::REPL","Alda/REPL.html#method-i-run","()","<p>Runs the session. Includes the start (#start), the main loop, and the termination (#terminate).\n"],["save","Alda::Score","Alda/Score.html#method-i-save","(filename)","<p>Saves the alda codes into a file.\n"],["score","Alda::REPL::TempScore","Alda/REPL/TempScore.html#method-i-score","()","<p>Print the history (all Alda code of the score).\n\n<pre>$ alda-irb\n&gt; violin_; a b\nviolin: [a b]\n&gt; score\nviolin: ...</pre>\n"],["score_data","Alda::REPL::TempScore","Alda/REPL/TempScore.html#method-i-score_data","()",""],["score_events","Alda::REPL::TempScore","Alda/REPL/TempScore.html#method-i-score_events","()","<p>Prints the parsed events output of the score. This is the output that you get when you call Alda::Score#parse …\n"],["score_text","Alda::REPL::TempScore","Alda/REPL/TempScore.html#method-i-score_text","()",""],["setup_repl","Alda::REPL","Alda/REPL.html#method-i-setup_repl","(opts)","<p>Sets up the REPL session. This method is called in ::new. After you #terminate the session, you cannot …\n"],["slug_to_snake","Alda::Utils","Alda/Utils.html#method-c-slug_to_snake","(str)","<p>Converts a slug-case String to a snake_case Symbol. The inverse of ::snake_to_slug.\n"],["snake_to_slug","Alda::Utils","Alda/Utils.html#method-c-snake_to_slug","(sym)","<p>Converts a snake_case Symbol to a slug-case String. The inverse of ::slug_to_snake.\n"],["start","Alda::REPL","Alda/REPL.html#method-i-start","()","<p>Starts the session. Currently does nothing.\n"],["terminate","Alda::REPL","Alda/REPL.html#method-i-terminate","()","<p>Terminates the REPL session. In Alda 1, just calls #clear_history. In Alda 2, sends a SIGINT to the nREPL …\n"],["to_a","Alda::EventList","Alda/EventList.html#method-i-to_a","()","<p>Same as #events.\n"],["to_alda_code","Alda::AtMarker","Alda/AtMarker.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n"],["to_alda_code","Alda::Chord","Alda/Chord.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n<p>Behaves differently for Alda 1 and Alda 2: because Alda 2 does not …\n"],["to_alda_code","Alda::Cram","Alda/Cram.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n"],["to_alda_code","Alda::Event","Alda/Event.html#method-i-to_alda_code","()","<p>Converts to alda code. To be overridden in subclasses.\n"],["to_alda_code","Alda::EventContainer","Alda/EventContainer.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n"],["to_alda_code","Alda::GetVariable","Alda/GetVariable.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n"],["to_alda_code","Alda::InlineLisp","Alda/InlineLisp.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n"],["to_alda_code","Alda::LispIdentifier","Alda/LispIdentifier.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n"],["to_alda_code","Alda::Marker","Alda/Marker.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n"],["to_alda_code","Alda::Note","Alda/Note.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n"],["to_alda_code","Alda::Octave","Alda/Octave.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n"],["to_alda_code","Alda::Part","Alda/Part.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n"],["to_alda_code","Alda::Raw","Alda/Raw.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n"],["to_alda_code","Alda::Rest","Alda/Rest.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n"],["to_alda_code","Alda::Sequence","Alda/Sequence.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n"],["to_alda_code","Alda::SetVariable","Alda/SetVariable.html#method-i-to_alda_code","()","<p>Specially, the returned value ends with a newline “\\n”. Overrides Alda::Event#to_alda_code …\n"],["to_alda_code","Alda::Voice","Alda/Voice.html#method-i-to_alda_code","()","<p>Overrides Alda::Event#to_alda_code.\n"],["to_alda_code","Array","Array.html#method-i-to_alda_code","()","<p>See Alda::Event#to_alda_code. Behaves differently for Alda 1 and Alda 2 (due to a breaking change).\n"],["to_alda_code","FalseClass","FalseClass.html#method-i-to_alda_code","()","<p>See Alda::Event#to_alda_code.\n"],["to_alda_code","Hash","Hash.html#method-i-to_alda_code","()","<p>See Alda::Event#to_alda_code. Behaves differently for Alda 1 and Alda 2 (due to a breaking change).\n"],["to_alda_code","NilClass","NilClass.html#method-i-to_alda_code","()","<p>See Alda::Event#to_alda_code.\n"],["to_alda_code","Numeric","Numeric.html#method-i-to_alda_code","()","<p>See Alda::Event#to_alda_code.\n"],["to_alda_code","Range","Range.html#method-i-to_alda_code","()","<p>See Alda::Event#to_alda_code.\n"],["to_alda_code","String","String.html#method-i-to_alda_code","()","<p>See Alda::Event#to_alda_code.\n"],["to_alda_code","Symbol","Symbol.html#method-i-to_alda_code","()","<p>See Alda::Event#to_alda_code.\n"],["to_alda_code","TrueClass","TrueClass.html#method-i-to_alda_code","()","<p>See Alda::Event#to_alda_code.\n"],["to_s","Alda::REPL::TempScore","Alda/REPL/TempScore.html#method-i-to_s","()","<p>Overrides Alda::Score#to_s. Returns the history.\n\n<pre>$ alda-irb\n&gt; harmonica_; a b c\nharmonica: [a b c]\n&gt; guitar_; ...</pre>\n"],["to_s","Alda::Score","Alda/Score.html#method-i-to_s","()","<p>Returns a String containing the alda codes representing the score.\n"],["to_s","StringIO","StringIO.html#method-i-to_s","()","<p>Equivalent to <code>string</code>.\n"],["try_command","Alda::REPL","Alda/REPL.html#method-i-try_command","()","<p>Run the block. In Alda 1, catches Alda::CommandLineError. In Alda 2, catches Alda::NREPLServerError. …\n"],["up?","Alda","Alda.html#method-c-up-3F","()","<p>Whether the alda server is up. Checks whether there are any play processes in ::processes in Alda 2. …\n"],["warn","Alda::Utils","Alda/Utils.html#method-c-warn","(message)","<p>Prints a warning message to standard error, appended by a newline. The message is prefixed with the filename …\n"],["win_platform?","Alda::Utils","Alda/Utils.html#method-c-win_platform-3F","()","<p>Returns whether the current platform is Windows.\n"],["~","Alda::Note","Alda/Note.html#method-i-~","()","<p>Append a natural sign after #pitch.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Alda</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Score</span>.<span class=\"ruby-identifier\">new</span> { <span class=\"ruby-identifier\">piano_</span>; <span class=\"ruby-identifier\">key_sig</span> <span class=\"ruby-string\">&#39;f+&#39;</span>; <span class=\"ruby-operator\">~</span><span class=\"ruby-identifier\">f</span> }.<span class=\"ruby-identifier\">play</span>\n<span class=\"ruby-comment\"># (plays an F note)</span>\n</pre>\n"],["CHANGELOG","","CHANGELOG_md.html","","<p>CHANGELOG\n<p>v0.3.1 (2023-06-03)\n<p>New features and new API:\n"],["CODE_OF_CONDUCT","","CODE_OF_CONDUCT_md.html","","<p>Contributor Covenant Code of Conduct\n<p>Our Pledge\n<p>In the interest of fostering an open and welcoming environment, …\n"],["LICENSE","","LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright © 2020 Ulysses\n<p>Permission is hereby granted, free of charge, to any person …\n"],["README","","README_md.html","","<p>alda-rb\n<p><img src=\"https://badge.fury.io/rb/alda-rb.svg\">\n<p>A Ruby library for live-coding music with Alda …\n"]]}}